Вступление

Теперь, когда вы знаете, на что способен MiniLibX,
мы начнем с выполнения некоторых очень простых вещей.
Это даст вам четкое представление о том,
как писать высокопроизводительный код с использованием этой библиотеки.
Для многих проектов главное - производительность.
Поэтому крайне важно, чтобы вы внимательно прочитали этот раздел.

Компиляция в Linux

В случае Linux вы можете использовать zip-файл,
предоставленный здесь (https://github.com/42Paris/minilibx-linux),
который является совместимой с Linux версией MLX.
Он имеет точно такие же функции и использует одни и те же вызовы функций.
Имейте в виду, что использование магии памяти на изображениях может отличаться,
поскольку реализации объектов зависят от архитектуры.
Затем вам следует распаковать MLX для Linux в новую папку в корневом
каталоге вашего проекта под названием mlx_linux.

Minilibx для Linux требует xorg, x11 и zlib,
поэтому вам потребуется установить следующие зависимости:
xorg, libxext-dev и zlib1g-dev.
Установку этих зависимостей в Ubuntu можно выполнить следующим образом:

sudo apt-get update && sudo apt-get install xorg libxext-dev zlib1g-dev

Теперь все, что осталось, это настроить MLX,
просто запустите сценарий настройки в корне данного репозитория, и все готово.

Для объектных файлов вы можете добавить следующее правило в свой файл makefile,
предполагая, что у вас есть исходный код mlx для linux
в каталоге с именем mlx_linux в корневом каталоге вашего проекта:

%.o: %.c
	$(CC) -Wall -Wextra -Werror -I/usr/include -Imlx_linux -O3 -c $< -o $@

Для связи с необходимым внутренним API Linux:

$(NAME): $(OBJ)
	$(CC) $(OBJ) -Lmlx_linux -lmlx_linux -L/usr/lib -Imlx_linux -lXext -lX11 -lm -lz -o $(NAME)

Инициализация

Прежде чем мы сможем что-либо сделать с библиотекой MINILIBX,
мы должны включить заголовок <mlx.h> для доступа ко всем функциям,
и мы должны выполнить функцию mlx_init.
Это установит соединение с правильной графической системой и вернет void *,
которая содержит местоположение нашего текущего экземпляра MLX.
Для инициализации MiniLibX можно выполнить следующее:

#include <mlx.h>
int	main(void)
{
	void	*mlx;

	mlx = mlx_init();
}

Когда вы запускаете код, вы можете не заметить,
что ничего не появляется и что ничего не отображается.
Что ж, очевидно, это как-то связано с тем фактом, что вы еще не создаете окно,
поэтому давайте попробуем инициализировать крошечное окно,
которое останется открытым навсегда.
Вы можете закрыть его, нажав CTRL + C в своем терминале.
Для достижения этой цели мы просто вызовем функцию mlx_new_window,
которая вернет указатель на окно, которое мы только что создали.
Мы можем указать высоту, ширину окна и заголовок.
Затем нам придется вызвать mlx_loop, чтобы инициировать рендеринг окна.
Давайте создадим окно шириной 1920, высотой 1080 и названием “Привет, мир!”:

#include <mlx.h>
int	main(void)
{
	void	*mlx;
	void	*mlx_win;

	mlx = mlx_init();
	mlx_win = mlx_new_window(mlx, 1920, 1080, "Hello world!");
	mlx_loop(mlx);
}

Запись пикселей в изображение

Теперь, когда у нас есть базовое управление окнами,
мы можем начать с добавления пикселей в окно.
Как вы решите получить эти пиксели, зависит от вас,
однако будут обсуждены некоторые оптимизированные способы сделать это.
Прежде всего, мы должны принять во внимание,
что функция mlx_pixel_put работает очень и очень медленно.
Это происходит потому, что он пытается мгновенно переместить пиксель в окно
(не дожидаясь полного отображения кадра).
По этой единственной причине нам придется поместить все наши пиксели в буфер изображения,
которое мы затем поместим в окно.
Все это звучит очень сложно, но поверьте мне, это не так уж плохо.

Прежде всего, мы должны начать с понимания того,
какой тип изображения требуется mlx.
Если мы инициируем изображение, нам придется передать несколько указателей,
в которые оно запишет несколько важных переменных.
Первый из них - это bpp, также называемый битами на пиксель.
Поскольку пиксели в основном являются целыми числами, обычно они составляют 4 байта,
однако это может отличаться, если мы имеем дело с небольшим конечным значением
(что означает, что мы, скорее всего, находимся на удаленном дисплее и имеем
только 8-битные цвета).

Теперь мы можем инициализировать изображение размером 1920× 1080 следующим образом:

#include <mlx.h>

int	main(void)
{
	void	*img;
	void	*mlx;

	mlx = mlx_init();
	img = mlx_new_image(mlx, 1920, 1080);
}

Это было не так уж плохо, не так ли?
Теперь у нас есть изображение, но как именно мы записываем в него пиксели?
Для этого нам нужно получить адрес памяти,
по которому мы будем соответствующим образом изменять байты.
Мы получаем этот адрес следующим образом:

#include <mlx.h>

typedef struct	s_data {
	void	*img;
	char	*addr;
	int		bits_per_pixel;
	int		line_length;
	int		endian;
}				t_data;

int	main(void)
{
	void	*mlx;
	t_data	img;

	mlx = mlx_init();
	img.img = mlx_new_image(mlx, 1920, 1080);

	/*
	** После создания изображения мы можем вызвать "mlx_get_data_addr`, мы передаем
    ** `бит_пер_пиксель`, `длина строки` и `конец` по ссылке.
    ** Затем они будут установлены соответствующим образом для *текущего* адреса данных.
	*/
	img.addr = mlx_get_data_addr(img.img, &img.bits_per_pixel, &img.line_length,
								&img.endian);
}

Обратите внимание, как мы передаем переменные bits_per_pixel, line_length и endian по ссылке?
Они будут установлены соответствующим образом MiniLibX, как описано выше.

Теперь у нас есть адрес изображения, но по-прежнему нет пикселей.
Прежде чем мы начнем с этого, мы должны понять, что байты не выровнены,
это означает, что длина строки отличается от фактической ширины окна.
Поэтому мы ВСЕГДА должны вычислять смещение памяти, используя длину строки,
заданную mlx_get_data_addr.

Мы можем очень легко рассчитать его, используя следующую формулу:

int offset = (y * line_length + x * (bits_per_pixel / 8));


Теперь, когда мы знаем, куда писать, становится очень легко написать функцию,
которая будет имитировать поведение mlx_pixel_put, но просто будет во много раз быстрее:

typedef struct	s_data {
	void	*img;
	char	*addr;
	int		bits_per_pixel;
	int		line_length;
	int		endian;
}				t_data;

void	my_mlx_pixel_put(t_data *data, int x, int y, int color)
{
	char	*dst;

	dst = data->addr + (y * data->line_length + x * (data->bits_per_pixel / 8));
	*(unsigned int*)dst = color;
}

Обратите внимание, что это вызовет проблему.
Поскольку изображение представлено в окне в режиме реального времени,
изменение одного и того же изображения приведет к разрыву экрана при записи в него.
Поэтому вам следует создать два или более изображений для временного хранения ваших кадров.
Затем вы можете выполнить запись во временное изображение,
чтобы вам не приходилось выполнять запись в представленное в данный момент изображение.

Перемещение изображений в окно

Теперь, когда мы наконец можем создать наше изображение,
мы также должны подтолкнуть его к окну, чтобы мы могли его увидеть.
Это довольно прямолинейно, давайте посмотрим,
как мы можем написать красный пиксель в (5,5) и поместить его в наше окно:

#include <mlx.h>

typedef struct	s_data {
	void	*img;
	char	*addr;
	int		bits_per_pixel;
	int		line_length;
	int		endian;
}				t_data;

int	main(void)
{
	void	*mlx;
	void	*mlx_win;
	t_data	img;

	mlx = mlx_init();
	mlx_win = mlx_new_window(mlx, 1920, 1080, "Hello world!");
	img.img = mlx_new_image(mlx, 1920, 1080);
	img.addr = mlx_get_data_addr(img.img, &img.bits_per_pixel, &img.line_length,
								&img.endian);
	my_mlx_pixel_put(&img, 5, 5, 0x00FF0000);
	mlx_put_image_to_window(mlx, mlx_win, img.img, 0, 0);
	mlx_loop(mlx);
}

Обратите внимание, что 0x00FF0000 является шестнадцатеричным представлением
ARGB(0,255,0,0).красный пиксель на (5,5) и поместите его в наше окно:

Проверьте свои навыки!

Теперь, когда вы поняли основы, освоитесь с библиотекой и займитесь чем-нибудь прикольным!
Вот несколько идей:

  - Печатайте квадраты, круги, треугольники и шестиугольники на экране,
 записывая соответствующие пиксели.
  - Попробуйте добавить градиенты, создать радугу и освоиться с использованием цветов rgb.
  - Попробуйте создавать текстуры, создавая изображение в циклах.